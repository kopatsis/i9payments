{{/* page.tmpl */}}
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <script
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.10.0/dist/cdn.min.js"
      defer
    ></script>
    <script type="module">
      import { initializeApp } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-app.js";
      import {
        getAuth,
        sendPasswordResetEmail,
        sendEmailVerification,
      } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-auth.js";

      const firebaseConfig = {
        apiKey: "AIzaSyBOksfyE0unI87E533LWTKV6jpW-F1dqDA",
        authDomain: "i9auth.firebaseapp.com",
        projectId: "i9auth",
        storageBucket: "i9auth.appspot.com",
        messagingSenderId: "284108905250",
        appId: "1:284108905250:web:b866b21949e149af7ca37b",
      };

      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);

      // Expose the necessary Firebase functions globally
      window.sendPasswordResetEmail = sendPasswordResetEmail;
      window.sendEmailVerification = sendEmailVerification;
      window.auth = auth;
    </script>
  </head>

  <!-- <body x-data="separateLoginCheck()" x-init="initializeAuth"> -->
  <body>
    <h1>Admin Dashboard</h1>

    <div>Email Address: {{.Email}}</div>

    <div x-data="{ editing: false, name: '{{.Name}}' }">
      <div x-show="!editing">
        Display Name: <span x-text="name"></span>
        <button @click="editing = true">Edit</button>
      </div>
      <form x-show="editing" action="/updateName" method="POST">
        Display Name: <input type="text" name="name" x-model="name" />
        <button type="submit">Save</button>
        <button type="button" @click="editing = false">Cancel</button>
      </form>
    </div>

    {{ if not .Mobile }}
    <div>Giga Membership:</div>
    <div>
      {{ if .Paying }}
      <button><a href="/pay">Manage Membership</a></button>
      {{ else if .Verify }}
      <button><a href="/pay">Start Giga Membership</a></button>
      {{else}}
      <div>Please verify your email address to start a Giga Membership</div>
      <!-- <p x-show="notLoggedIn"> -->
      {{if not .ClientOn}}
      <p>
        When you created an account, you were sent an email to verify your email
        address. If you can't find it, check your spam folder. To send another,
        log into the i9 app to access the settings (gear icon) on the upper
        right corner and click 'Send Verification Email'.
      </p>
      {{ end }}
      {{ end }}
    </div>
    {{ end }}

    <div x-data="firebaseHandler('{{.Email}}')">
      <button @click="sendReset">Send password reset email</button>
      {{if not .Verify}}
      {{if .ClientOn}}
      <!-- <button x-show="!notLoggedIn" @click="sendVerificationEmail"> -->
        <button @click="sendVerificationEmail">
          Send verification email
      </button>
      {{ end }}
      {{ end }}
      <div x-show="errorMessage" style="color: red" x-text="errorMessage"></div>
      <div
        x-show="successMessage"
        style="color: green"
        x-text="successMessage"
      ></div>
      <div>
        <button x-show="successMessage" @click="location.reload()">
          Refresh Page
        </button>
      </div>
    </div>

    <div x-data="{ showConfirmation: false, email: '' }">
      <button @click="showConfirmation = true">Delete Account</button>
      <form
        x-show="showConfirmation"
        action="/delete"
        method="POST"
        @submit="showConfirmation = false"
      >
        <h3>
          Warning: This action is permanent and cannot be undone, no matter how
          much you email us to undo it.
        </h3>
        <p>
          If you are sure you want to delete your account, please enter your
          email exactly as it appears above.
        </p>

        <input type="email" x-model="email" placeholder="Email" />
        <button type="submit" :disabled="email !== '{{.Email}}'">Delete</button>
        <button type="button" @click="showConfirmation = false; email = ''">
          Cancel
        </button>
      </form>
    </div>

    <div>
      <button><a href="/logout">Logout</a></button>
    </div>

    <script>
      // function separateLoginCheck() {
      //   return {
      //     currentUser: null,
      //     initializeAuth() {
      //       let ct = 0;
      //       const intervalId = setInterval(() => {
      //         console.log("run");
      //         if (window.auth) {
      //           ct++;
      //           console.log("????");
      //           this.currentUser = window.auth.currentUser;
      //           console.log(this.currentUser);
      //           if (ct > 5) {
      //             clearInterval(intervalId);
      //           }
      //         }
      //       }, 100);
      //     },
      //     get notLoggedIn() {
      //       console.log("nig", this.currentUser);
      //       return this.currentUser === null;
      //     },
      //   };
      // }

      function firebaseHandler(email) {
        return {
          errorMessage: "",
          successMessage: "",
          email: email,

          async sendReset() {
            this.errorMessage = "";
            this.successMessage = "";
            try {
              console.log(window.auth.currentUser, this.email);
              await window.sendPasswordResetEmail(window.auth, this.email);
              this.successMessage = "Password reset email sent!";
            } catch (error) {
              this.errorMessage =
                "Error sending password reset email: " + error.message;
            }
          },

          async sendVerificationEmail() {
            this.errorMessage = "";
            this.successMessage = "";
            try {
              console.log(window.auth.currentUser);
              await window.sendEmailVerification(window.auth.currentUser);
              this.successMessage = "Verification email sent!";
            } catch (error) {
              this.errorMessage =
                "Error sending verification email: " + error.message;
            }
          },
        };
      }

      // document.addEventListener("alpine:init", () => {
      //   Alpine.data("firebaseHandler", firebaseHandler);
      // });
    </script>
  </body>
</html>

<style></style>
