{{/* page.tmpl */}}
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.10.0/dist/cdn.min.js" defer></script>
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-app.js";
    import {
      getAuth,
      sendPasswordResetEmail,
      sendEmailVerification,
    } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-auth.js";

    const firebaseConfig = {
      apiKey: "AIzaSyBOksfyE0unI87E533LWTKV6jpW-F1dqDA",
      authDomain: "i9auth.firebaseapp.com",
      projectId: "i9auth",
      storageBucket: "i9auth.appspot.com",
      messagingSenderId: "284108905250",
      appId: "1:284108905250:web:b866b21949e149af7ca37b",
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);

    // Expose the necessary Firebase functions globally
    window.sendPasswordResetEmail = sendPasswordResetEmail;
    window.sendEmailVerification = sendEmailVerification;
    window.auth = auth;
  </script>
</head>


<body>
  <div class="centerpage">
    <div class="wholepage">
      <div class="loghead header">
        <b class="logheadtxt">i9 Admin Dashboard</b>
      </div>

      <div class="innercontent">

        <div class="gigaSection">
          <div class="partialHead">Basic Info</div>
          <div>Email: <b>{{.Email}}</b></div>

          <div class="justcenter" x-data="{ editing: false, name: '{{.Name}}' }">
            <div x-show="!editing">
              <span>Name:</span> <b x-text="name"></b>
              <button class="submit" @click="editing = true">Edit</button>
            </div>
            <form class="form" x-show="editing" action="/updateName" method="POST">
              <div class="buttonRow" style="flex-wrap: wrap;">
                <span>Name:</span> <input class="smallerInput" type="text" name="name" x-model="name" />
              </div>

              <div class="buttonRow">
                <button class="submit" type="submit">Save</button>
                <button class="submit" type="button" @click="editing = false">Cancel</button>
              </div>
            </form>
          </div>
        </div>


        {{ if not .Mobile }}
        <div class="gigaSection">
          <div class="partialHead">Giga Membership</div>
          <div class="justcenter">
            {{ if .Paying }}
            <button><a href="/pay">Manage Membership</a></button>
            {{ else if .Verify }}
            <button><a href="/pay">Start Giga Membership</a></button>
            {{else}}
            <div>Please verify your email address to start a Giga Membership</div>
            {{if not .ClientOn}}
            <p>
              When you created an account, you were sent an email to verify your email
              address. If you can't find it, check your spam folder. To be sent another,
              log into the i9 app to access the settings (gear icon) on the upper
              right corner and click 'Send Verification Email'.
            </p>
            {{ end }}
            {{ end }}
          </div>
          {{ end }}
        </div>

        <div class="justcenter" x-data="firebaseHandler('{{.Email}}')">
          <div class="buttonRow" style="flex-wrap: wrap;">
            <button class="submit" @click="sendReset">Send Password Reset Email</button>
            {{if not .Verify}}
            {{if .ClientOn}}
            <button class="submit" @click="sendVerificationEmail">
              Send Verification Email
            </button>
            {{ end }}
            {{ end }}
          </div>

          <div x-show="errorMessage" style="color: rgb(222, 0, 0)" x-text="errorMessage"></div>
          <div x-show="successMessage" style="color: green" x-text="successMessage"></div>
          <div class="buttonRow">
            <button class="submit" x-show="successMessage" @click="location.reload()">
              Refresh Page
            </button>
          </div>
        </div>

        <div class="justcenter" x-data="{ showConfirmation: false, email: '' }">
          <div class="partialHead">
            Danger Zone
          </div>
          <div class="dangerZone justcenter">
            <div class="buttonRow" x-show="!showConfirmation">
              <button class="submit danger" @click="showConfirmation = true">Delete Account</button>
            </div>
            <form class="form" x-show="showConfirmation" action="/delete" method="POST"
              @submit="showConfirmation = false">
              <div class="miniHead">
                Warning: This action is permanent and cannot be undone, no matter how
                much you email us to undo it.
              </div>
              <div>
                If you are absolutely sure you want to delete your account, please enter your
                full email address.
              </div>

              <div>
                <input type="email" x-model="email" placeholder="Email" />
              </div>

              <div class="buttonRow">
                <button class="submit danger" type="submit" :disabled="email !== '{{.Email}}'">Delete Account</button>
                <button class="submit" type="button" @click="showConfirmation = false; email = ''">
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>

      </div>
      <div class="footer">
        <button class="submit"><a href="/logout" style="text-decoration: none; color: inherit">Sign Out</a></button>
      </div>
    </div>
  </div>

  <script>

    function firebaseHandler(email) {
      return {
        errorMessage: "",
        successMessage: "",
        email: email,

        async sendReset() {
          this.errorMessage = "";
          this.successMessage = "";
          try {
            console.log(window.auth.currentUser, this.email);
            await window.sendPasswordResetEmail(window.auth, this.email);
            this.successMessage = "Password reset email sent!";
          } catch (error) {
            this.errorMessage =
              "Error sending password reset email: " + error.message;
          }
        },

        async sendVerificationEmail() {
          this.errorMessage = "";
          this.successMessage = "";
          try {
            console.log(window.auth.currentUser);
            await window.sendEmailVerification(window.auth.currentUser);
            this.successMessage = "Verification email sent!";
          } catch (error) {
            this.errorMessage =
              "Error sending verification email: " + error.message;
          }
        },
      };
    }

  </script>
</body>

</html>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap");

  * {
    font-family: "Poppins", sans-serif;
  }

  body {
    margin: 0;
    padding: 0;
  }

  .centerpage {
    display: flex;
    align-items: center;
    justify-content: center;
    display: flex;
    position: fixed;
    background-color: rgb(97, 97, 97);
    width: 100dvw;
    height: 100dvh;
  }

  .wholepage {
    height: 100dvh;
    width: min(100dvw, 960px);
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    position: fixed;
    background: white;
  }

  .header {
    width: 100%;
  }

  .footer {
    border-top: 1px solid grey;
    margin-top: 5px;
    padding: 5px;
  }

  .form {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex-wrap: wrap;
  }

  .innercontent {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    width: 100%;
    align-items: center;
  }

  .loghead,
  .footer {
    width: 100%;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
  }

  .logheadtxt {
    font-size: clamp(16px, 8dvw, 48px);
    user-select: none;
  }

  .buttonRow {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
  }

  .gigaSection {
    margin: 5px;
    border-bottom: 1px solid grey;
    padding: 5px;
    padding-left: 15px;
    padding-right: 15px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .dangerZone {
    padding: 5px;
    border: 2px solid rgb(222, 0, 0);
    min-width: 250px;
    min-height: 100px;
    margin-left: 5px;
    margin-right: 5px;
  }

  .partialHead {
    font-size: 1.6em;
    font-weight: bold;
  }

  .miniHead {
    font-size: 1.2em;
    font-weight: bold;
  }

  input {
    border: 1px solid rgb(137, 151, 155);
    border-radius: 0px;
    transition: border-color 150ms ease-in-out 0s;
    outline: none;
    font-size: 16px;
    margin: 4px;
    padding-left: 10px;
    padding-right: 10px;
    min-width: min(444px, calc(100dvw - 50px));
  }

  .smallerInput {
    min-width: min(250px, calc(75dvw - 50px));
  }

  .submit {
    border-radius: 0px;
    transition: border-color 150ms ease-in-out 0s;
    outline: none;
    font-size: 16px;
    margin: 10px;
    padding-top: 6px;
    padding-bottom: 6px;
    padding-left: 12px;
    padding-right: 12px;
    border: 1px solid rgb(137, 151, 155);
    color: inherit;
    background-color: transparent;
    font-weight: normal;
    cursor: pointer;
  }

  .submit:hover {
    background-color: aliceblue;
  }

  .submit.danger {
    color: rgb(222, 0, 0);
    border: 1px solid rgb(222, 0, 0);
  }

  .submit.danger:hover {
    background-color: rgb(222, 0, 0);
    color: white;
  }

  .justcenter {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
</style>