<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login Page</title>
    <script
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.10.0/dist/cdn.min.js"
      defer
    ></script>
    <script type="module">
      import { initializeApp } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-app.js";
      import {
        getAuth,
        signInWithEmailAndPassword,
        sendPasswordResetEmail,
      } from "https://www.gstatic.com/firebasejs/10.11.0/firebase-auth.js";

      const firebaseConfig = {
        apiKey: "AIzaSyBOksfyE0unI87E533LWTKV6jpW-F1dqDA",
        authDomain: "i9auth.firebaseapp.com",
        projectId: "i9auth",
        storageBucket: "i9auth.appspot.com",
        messagingSenderId: "284108905250",
        appId: "1:284108905250:web:b866b21949e149af7ca37b",
      };

      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);

      // Expose the necessary Firebase functions globally
      window.signInWithEmailAndPassword = signInWithEmailAndPassword;
      window.sendPasswordResetEmail = sendPasswordResetEmail;
      window.auth = auth;
    </script>
    <link rel="stylesheet" href="/static/styles.css" />
  </head>
  <body x-data="loginHandler">
    <div class="centerpage">
      <div class="wholepage">
        <div class="loading" id="loader" style="display: none">
          <div class="bouncer">
            <img src="/static/images/i9logotsp.png" alt="sdafa" />
          </div>
          <div class="loader2"></div>
        </div>

        <div
          class="loghead-log"
          x-data="dimensionHandler()"
          x-init="updateDimensions()"
          @resize.window="updateDimensions()"
          x-bind:style="{ fontSize: fontSize + 'px', height: height + 'px' }"
        >
          <b class="logheadtxt">i9 Admin</b>
        </div>

        <div class="innercontent-log">
          {{ if .Email }}
          <div class="isloggedin">
            <div>You are already logged in with email {{ .Email }}</div>
            <div>Would you like to stay signed in?</div>
            <div class="isloggedbuttons">
              <button class="submit">
                <a href="/" style="text-decoration: none; color: inherit"
                  >Stay Signed In</a
                >
              </button>
              <button class="submit">
                <a href="/logout" style="text-decoration: none; color: inherit"
                  >Sign Out</a
                >
              </button>
            </div>
          </div>
          {{else}}
          <div class="loginouter">
            <div class="logintxt">Sign in</div>
            <div class="signinopt">
              or
              <button class="link-button" type="button">
                <a
                  href="/new?returnTo={{ .Return }}"
                  style="text-decoration: none; color: inherit"
                  >create an account</a
                >
              </button>
            </div>
          </div>
          <div class="form">
            <div
              x-show="errorMessage"
              class="error"
              x-text="errorMessage"
            ></div>
            <div>
              <label class="hide" for="email">Email:</label>
              <input
                id="email"
                type="email"
                x-model="email"
                placeholder="Email"
                required
              />
            </div>
            <div>
              <label class="hide" for="password">Password:</label>
              <input
                id="password"
                type="password"
                x-model="password"
                placeholder="Password"
                required
              />
            </div>
            <div>
              <button class="submit" @click="login">Sign In</button>
            </div>
            <div>
              <div x-data="{ showModal: false }">
                <button
                  class="link-button"
                  type="button"
                  @click="showModal = true"
                >
                  Forgot Password?
                </button>

                <div
                  x-show="showModal"
                  class="modal-log"
                  @keydown.window.escape="showModal = false"
                >
                  <div
                    x-show="showModal"
                    class="modal-content-log"
                    @click.away="showModal = false"
                    x-bind:class="{ 'enter-log': showModal, 'leave-log': !showModal }"
                    x-transition:leave="transition: opacity 0.3s ease-in, transform 0.3s ease-in;"
                    x-transition:leave-start="opacity: 1; transform: scale(1);"
                    x-transition:leave-end="opacity: 0; transform: scale(0.5);"
                  >
                    <div class="closeline">
                      <button class="link-button" @click="showModal = false">
                        &times;
                      </button>
                    </div>
                    <div class="form" x-data="resetHandler">
                      <div class="resethead">Password Reset</div>
                      <div>
                        <label class="hide" for="resetemail">Email:</label>
                        <input
                          id="resetemail"
                          type="email"
                          x-model="resetemail"
                          placeholder="Email"
                          required
                        />
                      </div>
                      <div>
                        <button class="submit" @click="reset">
                          Send Reset Email
                        </button>
                      </div>
                      <div
                        x-show="errorMessage"
                        class="error"
                        x-text="errorMessage"
                      ></div>
                      <div
                        x-show="successMessage"
                        class="success"
                        x-text="successMessage"
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          {{ end }}
        </div>
      </div>
    </div>

    <script>
      function dimensionHandler() {
        return {
          fontSize: 16,
          height: 24,
          updateDimensions() {
            const width = window.innerWidth;
            const height = window.innerHeight;
            const size = Math.min(width, height) * 0.08;
            this.fontSize = Math.max(16, Math.min(48, size));

            const heightSize = Math.min(width, height) * 0.1;
            this.height = Math.max(24, Math.min(54, heightSize));
          },
        };
      }

      function loginHandler() {
        function sleep(ms) {
          return new Promise((resolve) => setTimeout(resolve, ms));
        }

        return {
          email: "",
          password: "",
          errorMessage: "",
          async login() {
            document.getElementById("loader").style.display = "flex";
            this.errorMessage = "";

            await sleep(500);

            window
              .signInWithEmailAndPassword(
                window.auth,
                this.email,
                this.password
              )
              .then((userCredential) => {
                const idTokenPromise = userCredential.user.getIdToken();
                const refreshToken = userCredential.user.refreshToken;
                return Promise.all([idTokenPromise, refreshToken]);
              })
              .then(([idToken, refreshToken]) => {
                return fetch("/verifyToken", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({ idToken, refreshToken, name: "" }),
                });
              })
              .then((response) => {
                if (response.ok) {
                  document.getElementById("loader").style.display = "none";
                  window.location.assign("/{{.Return}}");
                } else {
                  response.json().then((data) => {
                    console.error("Token verification failed", data);
                    this.errorMessage = "Token verification failed";
                    document.getElementById("loader").style.display = "none";
                  });
                }
              })
              .catch((error) => {
                console.error("Login failed:", error.code, error.message);
                this.errorMessage =
                  "Token verification failed: " + error.message;
                document.getElementById("loader").style.display = "none";
              });
          },
        };
      }

      function resetHandler() {
        return {
          resetemail: "",
          errorMessage: "",
          successMessage: "",
          reset() {
            this.errorMessage = "";
            this.successMessage = "";
            window
              .sendPasswordResetEmail(window.auth, this.resetemail)
              .then(() => {
                this.successMessage = "Password reset email sent successfully.";
              })
              .catch((error) => {
                this.errorMessage = error.message;
              });
          },
        };
      }
    </script>
  </body>
</html>
