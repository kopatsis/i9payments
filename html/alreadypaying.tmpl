{{/* page.tmpl */}}
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Manage Membership</title>
  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.10.0/dist/cdn.min.js" defer></script>
  <script src="https://js.stripe.com/v3/"></script>
</head>

<body>
  <div style="display: none" id="loader">loading...</div>
  <div class="centerpage">
    <div class="wholepage">
      <div class="loghead header">
        <b class="logheadtxt">i9 Admin Dashboard</b>
      </div>

      <div class="innercontent">
        {{if .Past}}
        <div class="partialHead">Critical Notice:</div>
        <div class="miniHead" style="color: red">
          Please update your payment information to avoid membership cancelation
        </div>
        {{ end }}
        <div>Email: <b>{{.Email}}</b></div>

        <div>Next billing cycle charge date: {{.Date}}</div>

        <div x-data class="form">
          {{if eq .Length "monthly"}}
          <div>Current Plan: Charged <b>Monthly</b> for <b>$4.99</b></div>
          <button class="submit" @click="swapFrequency('yearly')">
            Change to Plan to Yearly: $49.99
          </button>
          {{else}}
          <div>Current Plan: Charged <b>Yearly</b> for <b>$49.99</b></div>
          <div><button class="link-button" @click="swapFrequency('monthly')">
              Change to Plan to Monthly: $4.99
            </button>*</div>
          {{ end }}

          <div>
            *Changing membership plan takes effect <b>immediately</b>: You will be refunded a
            prorated portion of your previous subscription and charged the new
            fee.
          </div>

          <div id="showError"></div>
        </div>

        {{ if .External }}
        <div>Your payment is managed by {{.External}}.</div>
        {{ else }}
        <div>
          Your default payment method is your card with the brand
          {{.Brand}} and last four digits of {{.Four}}.
        </div>
        {{ end }}

        <div id="payment-update-form" x-data="{ showForm: false }" class="form">
          <button @click="showForm = !showForm" class="submit">Change Default Payment Method</button>
          <form id="payment-form" x-show="showForm">
            <div id="payment-element"></div>
            <div class="buttonRow">
              <button type="submit" class="submit">Submit</button>
              <button type="button" @click="showForm = false" class="submit">Cancel</button>
            </div>
          </form>
        </div>

        <div id="error-message"></div>

        <div x-data="{ showConfirm: false}" class="form">
          <button x-show="!showConfirm" @click="showConfirm = true" class="submit danger">
            Cancel Membership
          </button>

          <div x-show="showConfirm" class="form">
            <div>Are you sure you want to cancel your membership?</div>
            <div class="buttonRow">
              <button @click="cancelMembership" class="submit">Cancel Membership</button>
              <button @click="showConfirm = false" class="submit danger">Go Back</button>
            </div>

          </div>

          <div id="cancelError"></div>
        </div>
      </div>
      <div class="footer">
        <button class="submit">
          <a href="/logout" style="text-decoration: none; color: inherit">Sign Out</a>
        </button>
      </div>
    </div>
  </div>

  <script>
    function cancelMembership() {
      fetch("/cancel", {
        method: "POST",
        credentials: "include",
      })
        .then((response) => {
          if (response.ok) {
            window.location.reload();
          } else {
            response.text().then((text) => {
              console.log(text);
              document.getElementById("cancelError").textContent = text;
            });
          }
        })
        .catch(() => {
          console.log(error);
          document.getElementById("cancelError").textContent = error;
        });
    }

    function swapFrequency(newFrequency) {
      const formData = new FormData();
      formData.append("frequency", newFrequency);

      fetch("/swap", {
        method: "POST",
        credentials: "include",
        body: formData,
      })
        .then((response) => {
          console.log("reached???");
          if (response.ok) {
            window.location.reload();
          } else {
            response.text().then((text) => {
              console.log(text);
              document.getElementById("showError").textContent = text;
            });
          }
        })
        .catch((error) => {
          console.log(error);
          document.getElementById("showError").textContent = error;
        });
    }

    document.addEventListener("DOMContentLoaded", async () => {
      const stripe = Stripe(
        "pk_test_51PJLOAIstWH7VBmuSbipom0Z6Gy1Wj6wOjFtApmfGspxtTCywa9WEhP1UjB5XheYdCVXnUScy1zChx4lagbeZYvE002At1oIiP"
      );
      const clientSecret = "{{ .ClientSecret }}";

      const elements = stripe.elements({ clientSecret });
      const paymentElement = elements.create("payment");
      paymentElement.mount("#payment-element");

      const form = document.getElementById("payment-form");
      form.addEventListener("submit", async (event) => {
        event.preventDefault();

        const startTime = Date.now();

        document.getElementById("loader").style.display = "block";

        try {
          const { setupIntent, error } = await stripe.confirmSetup({
            elements,
            confirmParams: {
              return_url: window.location.href,
            },
            redirect: "if_required",
          });

          if (error) {
            document.getElementById("error-message").textContent =
              error.message;
          } else {
            const paymentMethodId = setupIntent.payment_method;

            const response = await fetch("/update", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              credentials: "include",
              body: JSON.stringify({
                payment_method_id: paymentMethodId,
              }),
            });

            if (response.ok) {
              location.reload();
            } else {
              const errorData = await response.json();
              document.getElementById("error-message").textContent =
                errorData.error;
            }
          }
        } catch (err) {
          document.getElementById("error-message").textContent = "Error processing payment, please try again.";
        } finally {
          document.getElementById("loader").style.display = "none";
        }


      });
    });
  </script>
</body>

</html>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap");

  * {
    font-family: "Poppins", sans-serif;
  }

  body {
    margin: 0;
    padding: 0;
  }

  .centerpage {
    display: flex;
    align-items: center;
    justify-content: center;
    display: flex;
    position: fixed;
    background-color: rgb(97, 97, 97);
    width: 100dvw;
    height: 100dvh;
  }

  .wholepage {
    height: 100dvh;
    width: min(100dvw, 960px);
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    position: fixed;
    background: white;
    overflow-y: auto;
  }

  .header {
    width: 100%;
  }

  .footer {
    border-top: 1px solid grey;
    margin-top: 5px;
    padding: 5px;
  }

  .innercontent {
    /* flex: 1; */
    display: flex;
    flex-direction: column;
    /* overflow-y: auto; */
    width: 100%;
    align-items: center;
  }

  .loghead,
  .footer {
    width: 100%;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
  }

  .logheadtxt {
    font-size: clamp(16px, 8dvw, 48px);
    user-select: none;
  }

  .submit {
    border-radius: 0px;
    transition: border-color 150ms ease-in-out 0s;
    outline: none;
    font-size: 16px;
    margin: 10px;
    padding-top: 6px;
    padding-bottom: 6px;
    padding-left: 12px;
    padding-right: 12px;
    border: 1px solid rgb(137, 151, 155);
    color: inherit;
    background-color: transparent;
    font-weight: normal;
    cursor: pointer;
  }

  .submit:hover {
    background-color: aliceblue;
  }

  .miniHead {
    font-size: 1.25em;
    font-weight: bold;
  }
</style>